PRACTICAL NO.4 
AIM: Tower of Hanoi and N-Queens problem solving 
A] Tower of Hanoi  
       Code:
       def tower_of_hanoi(n,a,b,c):
    if n==1:
        print(f"Move disk 1 from {a} to {c}")
        return
    #move n-1 disks from source to helper
    tower_of_hanoi(n-1,a,c,b)
    print(f"Move disk {n} from {a}to {c}")
    tower_of_hanoi(n-1,b,a,c)
num_disks=3
tower_of_hanoi(num_disks,'A','B','C')

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

B] N-Queens Problem 
Code:
def print_board(board):
    for row in board:
        print("".join(row))
    print()
def is_safe(board,row,col,n):
    for i in range(row):
        if board[i][col]=='Q':
            return False
    i,j=row,col
    while i>=0 and j>=0:
        if board[i][j]=='Q':
            return False
        i-=1
        j-=1
    i,j = row,col
    while i>=0 and j<n:
        if board[i][j]=='Q':
            return False
        i-=1
        j+=1
    return True
#Back Tracking
def solve_queens(board,row,n):
    if row==n:
        print_board(board)
        return True
    for col in range(n):
        if is_safe(board,row,col,n):
            board[row][col]='Q'
            if solve_queens(board,row+1,n):
                return True
            board[row][col]='.'
    return False
#Main Function
def four_queens():
    n=5
    board=[['.' for _ in range(n)]for _ in range(n)]
    if not solve_queens(board,0,n): #_is throwback variable
        print("No solution found")
four_queens()


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Practical No.4B
AIM : Constraint satisfaction problem
A] Map Coloring 
CODE :
import itertools

variables = ["A", "B", "C", "D"]
colors = ["Red", "Blue", "yellow", "green"]

all_assignments = itertools.product(colors, repeat=len(variables))

def valid(i):
    A, B, C, D = i
    return (A != B) and (B != C) and (A != C) and (A != D) and (B != D) and (C != D)

solutions=[]
for i in all_assignments:
    if valid(i):
        solutions.append(dict(zip(variables, i)))

print("Valid colorings of the map:")
for sol in solutions:
    print(sol)
