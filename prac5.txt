Aim: Creating server using express and handling HTTP methods. 
user.json
 
Q.1) Get details of the user whose id is 2.
Code:
get.js:
const fs = require('fs');
const port = 8000;
const express = require('express');
const app = express();
let users = JSON.parse(fs.readFileSync('./User.json'));
app.get('/api/vl/users', (req, res)=>{
    res.json(users);
});
app.get('/api/vl/users/:id', (req, res)=>{
    let id = req.params.id*1;
    const find_user = users.find(el => el.id == id)
    res.status(200).json(find_user)
    if(!find_user){
        return res.status(404).json({
            "status":"FAILED",
            "message":"Could not find the user"
        })
    }
    res.status(200).json(find_user)
});
app.listen(port, ()=>{
    console.log('Server running...')
});
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Q.2) Update the name of the user whose id is 2 (Using patch method)
Code:
const fs = require('fs');
const port = 8000;
const express = require('express');
const app = express();
let users = JSON.parse(fs.readFileSync('./User.json'));
app.get('/api/vl/users', (req, res)=>{
    res.json(users);
});
app.patch('/api/vl/users/:id', (req, res)=>{
    const user = JSON.parse(fs.readFileSync('User.json'));
    const updatedUsers = UserActivation.map(users=>{
        if(users.id ===2){
            users.name = 'Ram';
        }
        return users;
    });
    fs.writeFileSync('User.json',JSON.stringify(updatedUsers, null, 2));
    res.json({message: 'User with id 2 updated successfully'});
});
app.listen(port, ()=>{
    console.log('Server Running')
});
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
PRACTICAL 5:
5A] Create API.js file in Node folder>enter code>Create Users.json file>enter code>run node api>if module_not_found>install express(npm install express) and again run node api>Go to ThunderClient>New Req> enter localhost:8000/api/v1/users/ >Send
5B] for this just paste the localhost link in schrome
Users.json
[
 { "id": 1, "name": "John","age": 30},
 { "id": 2, "name": "jane Smith","age": 25},
 { "id": 3, "name": "Alice Johnsonn","age": 35}
]

A. Display details of all users
Api.js
const fs = require('fs');
const port = 8000;
const express = require('express');
const app = express();
let users = JSON.parse(fs.readFileSync('./users.json'));
app.get('/api/v1/users',(req,res)=>{
    res.json(users);
});
app.get('/api/v1/users/:id',(req,res)=>{
    let id = req.params.id * 1;
    const find_user = users.find(el =>el.id== id)
    res.status(200).json(find_user)
    if(!find_user){
        return res.status(404).json({
            "status":"FAILED",
            "message":"could not find the user"
        })
    }
    res.status(200).json(find_user);
})
app.listen(port,() =>{
 console.log("server Running")
});
C. update
const  fs=require("fs");
const port = 8000;
const express = require("express");
const app = express();
let users = JSON.parse(fs.readFileSync('./users.json'));
app.get('/api/v1/users',(req,res)=>{
    res.json(users);
});
app.patch('/api/v1/users/:id',(req,res)=>{
    const updatedUsers = users.map(user => {
        if(user.id === 2){
            user.name='Ram';
        }
        return user;
    });
    fs.writeFileSync('users.json',JSON.stringify(updatedUsers,null,2));
    res.json({message:'User with id 2 updated successfully'});
});    
app.listen(port,() => {
    console.log('Server Running.');
});
4. Delete
const fs = require('fs');
const express = require('express');
const app = express();
const port = 4000;

app.use(express.json());
let users = JSON.parse(fs.readFileSync('./users.json'));
app.get('/api/v1/users', (req, res) => {
  res.json(users);
});
app.delete('/api/v1/users/:id', (req, res) => {
    let id = req.params.id*1;
  const  users =JSON.parse(fs.readFileSync("./users.json"));
  const updatedUsers = users.filter(user=>user.id!==id);
  fs.writeFileSync('./users.json', JSON.stringify(updatedUsers, null, 2));
  res.json({message : 'User deleted sucessfully'});
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
