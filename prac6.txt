Practical No. 6 Testing of hypothesis for Mean 
1. Perform ToH for mean of one sample using z-test 
Code: 
from scipy.stats import norm 
import numpy as np 
 
def input_data(n=None, dtype=float): 
    data = [] 
    i = 0 
    while True: 
        if i==n: return data 
        inp = input(f'Enter element {i+1}: ') 
        if not inp and n is None: return data 
        data.append(dtype(inp)) 
        i += 1 
         
def ztest(data, pop_mean, pop_sd, alternative='two-sided'): 
    n = len(data) 
    xbar = np.mean(data) 
    Z = (xbar-pop_mean) / (pop_sd/(n**(1/2))) 
     
    if alternative=='two-sided': 
        return Z, 2*min(norm.cdf(Z), norm.sf(Z)) 
    elif alternative=='greater': 
        return Z, norm.sf(Z) 
    elif alternative=='less': 
        return Z, norm.cdf(Z) 
    else: 
        raise ValueError("alternative must be 'less', 'greater' or 'two-sided'") 
 
data = input_data() 
mu = float(input('Enter the population mean: ')) 
sigma = float(input('Enter the population standard deviation: ')) 
alt = alt if (alt:=input('Enter the type of test: ')) else 'two-sided' 
alpha = float(input("Enter the value of alpha:"))  
     
results = ztest(data, mu, sigma, alternative=alt) 
 
print("Z0 = test statistic:", results[0]) 
print("p-value:", results[1]) 
 
p_value = results[1]  
 
if p_value < alpha:  
 print("H0 is rejected")  
else: 
 print("H0 is accepted")  

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
2. Perform ToH for mean of one sample using t-test 
from scipy.stats import t 
import numpy as np 
 
def input_data(n=None, dtype=float): 
    data = [] 
    i = 0 
    while True: 
        if i==n: return data 
        inp = input(f'Enter element {i+1}: ') 
        if not inp and n is None: return data 
        data.append(dtype(inp)) 
        i += 1 
 
def ttest(data, pop_mean, alternative='two-sided'): 
    n = len(data) 
    xbar = np.mean(data) 
    s = np.std(data, ddof=1) 
    T = (xbar-pop_mean) / (s/(n**(1/2))) 
     
    if alternative=='two-sided': 
        return T, 2*min(t.cdf(T, n-1), t.sf(T, n-1)) 
    elif alternative=='greater': 
        return T, t.sf(T, n-1) 
    elif alternative=='less': 
        return T, t.cdf(T, n-1) 
    else: 
        raise ValueError("alternative must be 'less', 'greater' or 'two-sided'") 
 
data = input_data() 
mu = float(input('Enter the population mean: ')) 
alt = alt if (alt:=input('Enter the type of test: ')) else 'two-sided' 
alpha = float(input("Enter the value of alpha "))  
results = ttest(data, mu, alternative=alt) 
print(results) 
 
print("t0 = test statistic:", results[0]) 
print("p-value:", results[1]) 
 
p_value = results[1]  
 
if p_value < alpha:  
 print("H0 is rejected")  
else: 
 print("H0 is accepted")  
  
 
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 
 
3. Perform ToH for equality of mean of two samples using z-test 
from scipy.stats import norm 
import numpy as np 
 
def input_data(n=None, dtype=float): 
    data = [] 
    i = 0 
    while True: 
        if i==n: return data 
        inp = input(f'Enter element {i+1}: ') 
        if not inp and n is None: return data 
        data.append(dtype(inp)) 
        i += 1 
 
def ztest(data1, data2, pop_sd1, pop_sd2, alternative='two-sided'): 
    n1, n2 = len(data1), len(data2) 
    x1bar, x2bar = np.mean(data1), np.mean(data2) 
    Z = (x1bar-x2bar) / ((pop_sd1**2/n1)+(pop_sd2**2/n2))**(1/2) 
     
    if alternative=='two-sided': 
        return Z, 2*min(norm.cdf(Z), norm.sf(Z)) 
    elif alternative=='greater': 
        return Z, norm.sf(Z) 
    elif alternative=='less': 
        return Z, norm.cdf(Z) 
    else: 
        raise ValueError("alternative must be 'less', 'greater' or 'two-sided'") 
 
print('Sample 1:') 
data1 = input_data() 
sigma1 = float(input('Enter the population 1 standard deviation: ')) 
print('Sample 2:') 
data2 = input_data() 
sigma2 = float(input('Enter the population 2 standard deviation: ')) 
alt = alt if (alt:=input('Enter the type of test: ')) else 'two-sided' 
alpha = float(input('Enter the value of alpha:'))  
 
results = ztest(data1, data2, sigma1, sigma2, alternative=alt) 
print("Z0 = test statistic:", results[0]) 
print("p-value:", results[1]) 
 
p_value = results[1]  
 
if p_value < alpha:  
 print("H0 is rejected")  
else: 
 print("H0 is accepted")  
   
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
4. Perform ToH for equality of mean of two samples using t-test (independent) 
from scipy.stats import t 
import numpy as np 
 
def input_data(n=None, dtype=float): 
    data = [] 
    i = 0 
    while True: 
        if i==n: return data 
        inp = input(f'Enter element {i+1}: ') 
        if not inp and n is None: return data 
        data.append(dtype(inp)) 
        i += 1 
         
def ttest(data1, data2, alternative='two-sided'): 
    n1, n2 = len(data1), len(data2) 
    x1bar, x2bar = np.mean(data1), np.mean(data2) 
    var1, var2 = np.var(data1, ddof=1), np.var(data2, ddof=1) 
    dof = n1+n2-2 
    var = ((n1-1)*var1+(n2-1)*var2)/dof 
    T = (x1bar-x2bar) /((var/n1)+(var/n2))**(1/2) 
     
    if alternative=='two-sided': 
        return T, 2*min(t.cdf(T, dof), t.sf(T, dof)), dof 
    elif alternative=='greater': 
        return T, t.sf(T, dof), dof 
    elif alternative=='less': 
        return T, t.cdf(T, dof), dof 
    else: 
        raise ValueError("alternative must be 'less', 'greater' or 'two-sided'") 
 
 
print('Sample 1:') 
data1 = input_data() 
print('Sample 1:') 
data2 = input_data() 
alt = alt if (alt:=input('Enter the type of test: ')) else 'two-sided' 
alpha = float(input('Enter the value of alpha:'))  
    
results = ttest(data1, data2, alternative=alt) 
 
print("t0 = test statistic:", results[0]) 
print("p-value:", results[1]) 
p_value = results[1] 
 
if p_value < alpha:  
 print("H0 is rejected")  
else: 
 print("H0 is accepted") 

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 
5. Perform ToH for equality of mean of two samples using t-test (dependent) 
from scipy.stats import t 
import numpy as np 
 
def input_data(n=None, dtype=float): 
    data = [] 
    i = 0 
    while True: 
        if i==n: return data 
        inp = input(f'Enter element {i+1}: ') 
        if not inp and n is None: return data 
        data.append(dtype(inp)) 
        i += 1 
 
def ttest_dep(data1, data2, alternative='two-sided'): 
    d = [elem1-elem2 for elem1, elem2 in zip(data1, data2, strict=True)] 
    n = len(d) 
    dbar = np.mean(d) 
    s = np.std(d, ddof=1) 
    T = dbar / (s/(n**(1/2))) 
     
    if alternative=='two-sided': 
        return T, 2*min(t.cdf(T, n-1), t.sf(T, n-1)) 
    elif alternative=='greater': 
        return T, t.sf(T, n-1) 
    elif alternative=='less': 
        return T, t.cdf(T, n-1) 
    else: 
        raise ValueError("alternative must be 'less', 'greater' or 'two-sided'") 
 
print('Sample 1:') 
data1 = input_data() 
print('Sample 2:') 
data2 = input_data() 
alt = alt if (alt:=input('Enter the type of test: ')) else 'two-sided' 
alpha = float(input('Enter the value of alpha:'))  
 
results = ttest_dep(data1, data2, alternative=alt) 
print(results) 
 
p_value = results[1]  
 
if p_value < alpha:  
 print("H0 is rejected")  
else: 
 print("H0 is accepted") 


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX