PRACTICAL NO.6
AIM : Missionaries and Cannibals & Shuffle Deck of cards
A] Missionaries and Cannibals
CODE : 
#MOVES
moves=[(2,0),(0,2),(1,1),(1,0),(0,1)]
#check if state is valid
def is_valid(m_left, c_left, m_right, c_right):
    if m_left<0 or c_left<0 or m_right<0 or c_right<0:
        return False
    if(m_left>0 and m_left<c_left) or (m_right>0 and m_right<c_right):
        return False
    return True
def solve():
    from collections import deque

    start=(3,3,1)  #3 missionaries, 3 cannibals, boat on left
    goal=(0,0,0)   #3 missionaries, 3 cannibals, boat on right
    queue=deque()
    queue.append((start,[start]))
    visited=set()
    while queue:
        (m_left, c_left, boat), path = queue.popleft()
        if(m_left, c_left, boat) in visited:
            continue
        visited.add((m_left,c_left,boat))
        if(m_left, c_left, boat) == goal:
            return path
        for m, c in moves:
            if boat == 1:
                new_m_left = m_left - m
                new_c_left = c_left - c
                new_boat = 0
            else:
                new_m_left = m_left + m
                new_c_left = c_left + c
                new_boat = 1

            new_m_right = 3 - new_m_left
            new_c_right = 3 - new_c_left

            if is_valid(new_m_left, new_c_left, new_m_right, new_c_right):
                new_state = (new_m_left, new_c_left,new_boat)
                if new_state not in visited:
                    queue.append((new_state, path + [new_state]))
    return None
#run and print steps
steps=solve()
if steps:
    for i, (m,c,b) in enumerate(steps):
        side='Left' if b == 1 else 'Right'
        print(f"Steps {i}: Missionaries Left: {m}, Cannibals Left: {c}, Boat on: {side}")
else:
    print("No solution found")


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

2] Shuffle Deck of cards
CODE : 
import random
#Step 1: Create the deck
suits = ['Heart','Diamonds','Clubs','Spades']
ranks = ['2','3','4','5','6','7','8','9','10','Jack','Queen','King','Ace']
#Combine suits and ranks
deck =[rank + "of" + suit for suit in suits for rank in ranks]
#Step 2:Shuffle the deck
random.shuffle(deck)
#Step 3:Display the shuffled deck
print("Shuffled Deck of Cards:")
for card in deck:
    print(card)

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx