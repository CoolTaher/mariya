Practical No. 7 Testing of hypothesis for Variance 
1. Perform ToH for variance of one sample (chi2) 
from scipy.stats import chi2 
import numpy as np 
 
def input_data(n=None, dtype=float): 
    data = [] 
    i = 0 
    while True: 
        if i==n: return data 
        inp = input(f'Enter element {i+1}: ') 
        if not inp and n is None: return data 
        data.append(dtype(inp)) 
        i += 1 
 
def chi2test(data, pop_var, alternative='two-sided'): 
    n = len(data) 
    var = np.var(data, ddof=1) 
    CHI2 = (n-1)*var/pop_var 
     
    if alternative=='two-sided': 
        return CHI2, 2*min(chi2.cdf(CHI2, n-1), chi2.sf(CHI2, n-1)) 
    elif alternative=='greater': 
        return CHI2, chi2.sf(CHI2, n-1) 
    elif alternative=='less': 
        return CHI2, chi2.cdf(CHI2, n-1) 
    else: 
        raise ValueError("alternative must be 'less', 'greater' or 'two-sided'") 
 
data = input_data() 
sigma_squared = float(input('Enter the population variance: ')) 
alt = alt if (alt:=input('Enter the type of test: ')) else 'two-sided' 
alpha = float(input('Enter the value of alpha:'))  
 
results = chi2test(data, sigma_squared, alternative=alt) 
 
print("chi2 = test statistic:", results[0]) 
print("p-value:", results[1]) 
 
 
p_value = results[1]  
 
if p_value < alpha:  
 print("H0 is rejected")  
else: 
 print("H0 is accepted")

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


2. Perform ToH for variance of two sample (f-test) 
from scipy.stats import f 
import numpy as np 
 
def input_data(n=None, dtype=float): 
    data = [] 
    i = 0 
    while True: 
        if i==n: return data 
        inp = input(f'Enter element {i+1}: ') 
        if not inp and n is None: return data 
        data.append(dtype(inp)) 
        i += 1 
 
def ftest(data1, data2, alternative='two-sided'): 
    n1, n2 = len(data1), len(data2) 
    var1, var2 = np.var(data1, ddof=1), np.var(data2, ddof=1) 
    F = var1/var2 
     
    if alternative=='two-sided': 
        return F, 2*min(f.cdf(F, n1-1, n2-1), f.sf(F, n1-1, n2-1)) 
    elif alternative=='greater': 
        return F, f.sf(F, n1-1, n2-1) 
    elif alternative=='less': 
        return F, f.cdf(F, n1-1, n2-1) 
    else: 
        raise ValueError("alternative must be 'less', 'greater' or 'two-sided'") 
 
print('Sample 1:') 
data1 = input_data() 
print('Sample 2:') 
data2 = input_data() 
alt = alt if (alt:=input('Enter the type of test: ')) else 'two-sided' 
alpha = float(input('Enter the value of alpha:'))  
 
results = ftest(data1, data2, alternative=alt) 
print("F0 = test statistic:", results[0]) 
print("p-value:", results[1]) 
 
p_value = results[1]  
 
if p_value < alpha:  
 print("H0 is rejected")  
else: 
 print("H0 is accepted") 


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX