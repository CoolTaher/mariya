PRACTICAL 9 : 
--------------------------------------------------------

import numpy as np
from sklearn.svm import LinearSVC
from itertools import combinations
import matplotlib.pyplot as plt
import pprint

# Step 1: Take input for documents
docs = {}
n = int(input("Enter number of documents: "))

for i in range(1, n + 1):
    doc_id = input(f"\nEnter document ID for doc {i} (e.g., d{i}): ")
    f1 = float(input("  Enter feature 1: "))
    f2 = float(input("  Enter feature 2: "))
    rel = int(input("  Enter relevance score (higher = more relevant): "))
    
    docs[doc_id] = {"features": [f1, f2], "relevance": rel}

# Step 2: Create pairwise preference data
pairs = []
for (di, dj) in combinations(docs.keys(), 2):
    if docs[di]['relevance'] > docs[dj]['relevance']:
        pairs.append((di, dj))
    elif docs[dj]['relevance'] > docs[di]['relevance']:
        pairs.append((dj, di))

print("\nPairwise Preferences (more relevant doc first):")
pprint.pprint(pairs)

# Step 3: Build training data
X = []
y = []
for (more_rel, less_rel) in pairs:
    phi_i = np.array(docs[more_rel]['features'])
    phi_j = np.array(docs[less_rel]['features'])

    diff = phi_i - phi_j
    X.append(diff)
    y.append(1)

    X.append(-diff)
    y.append(0)

X = np.array(X)
y = np.array(y)

print("\nTraining data shape:", X.shape)
print("Training labels distribution:", np.bincount(y))

# Step 4: Train RankSVM
model = LinearSVC(C=1.0, loss='hinge', fit_intercept=False, max_iter=10000)
model.fit(X, y)

print("\nWeight vector w (learned by RankSVM):")
print(model.coef_)

# Step 5: Score documents
print("\nDocument Scores:")
scores = {}
for doc_id, doc_data in docs.items():
    phi = np.array(doc_data['features'])
    score = np.dot(model.coef_, phi)
    scores[doc_id] = score[0]
    print(f"{doc_id}: Score = {score[0]:.4f}, Relevance = {doc_data['relevance']}")

# Step 6: Ranking
ranked_docs = sorted(docs.keys(), key=lambda d: scores[d], reverse=True)
print("\nDocuments ranked by RankSVM:")
print(ranked_docs)

# Step 7: Plot results
plt.figure(figsize=(8, 6))
norm = plt.Normalize(vmin=min(scores.values()), vmax=max(scores.values()))

for doc_id, doc_data in docs.items():
    x, y_ = doc_data['features']
    score = scores[doc_id]
    rel = doc_data['relevance']
    plt.scatter(x, y_, s=150, c=norm(score), cmap='viridis', edgecolors='k')
    plt.text(x + 0.02, y_ + 0.02, f"{doc_id} (Rel={rel})\nScore={score:.2f}", fontsize=9)

plt.colorbar(label='RankSVM Score')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Documents in Feature Space Colored by RankSVM Score')
plt.grid(True)
plt.show()


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX